#!/usr/bin/python3
import copy
from sys import argv
from math import sqrt
import rospy
import actionlib
import tf
import numpy as np
from move_base_msgs.msg import MoveBaseAction, MoveBaseActionFeedback,\
    MoveBaseActionResult
from geometry_msgs.msg import Pose, PoseStamped, PoseWithCovarianceStamped

if len(argv) > 2 and (argv[2] == "stage_ros" or argv[2] == "gazebo"):
    simulator = argv[2]
else:
    simulator = "stage_ros"  # 'gazebo', 'stage_ros'

if simulator == "gazebo":
    from gazebo_msgs.msg import ModelState

if len(argv) > 3:
    rospy.loginfo("Arguments received: " + str(argv))
    avg_speed = float(argv[3])  # m/s
else:
    avg_speed = 0.5  # m/s


namespace = rospy.get_namespace()

if simulator == "gazebo":
    pose_pub = rospy.Publisher('/gazebo/set_model_state', ModelState, queue_size=1)
elif simulator == "stage_ros":
    pose_pub = rospy.Publisher(namespace+'cmd_pose', Pose, queue_size=1)
elif simulator == "virtual_robots":
    tf_broadcaster = tf.TransformBroadcaster()
    rviz_pose_pub = rospy.Publisher(namespace+'robot_pose', Pose, queue_size=1)  # Topic for RViz to display goal pose
ground_truth_pose = Pose()


def ground_truth_pose_cb(msg):
    global ground_truth_pose
    ground_truth_pose = msg.pose.pose


class MoveBaseAbstractActionServer(object):
    _feedback = MoveBaseActionFeedback()
    _result = MoveBaseActionResult()

    def __init__(self):
        self.simulator = simulator
        self.avg_speed = avg_speed
        if len(argv) > 1 and "node" not in argv[1]:
            self.robot_name = argv[1]
        else:
            self.robot_name = rospy.get_namespace().strip("/")
        if len(argv) > 4:
            self.robot_start_pos_x = float(argv[4])
        else:
            self.robot_start_pos_x = 0.0
        if len(argv) > 5:
            self.robot_start_pos_y = float(argv[5])
        else:
            self.robot_start_pos_y = 0.0

        self._as = actionlib.SimpleActionServer("move_base", MoveBaseAction, self.execute_cb, False)
        self._as.start()

    def execute_cb(self, goal):
        rospy.loginfo("Received goal: {}".format(goal))
        self.goal_pose_cb(goal.target_pose.pose)

        # Define and publish result
        self._result = MoveBaseActionResult()
        self._result.header.stamp = rospy.Time.now()
        self._result.header.frame_id = "map"
        self._result.status.status = 3
        self._result.status.text = "Goal reached"
        # self._result.result.base_position = ground_truth_pose
        self._as.set_succeeded(self._result)


    def goal_pose_cb(self, msg):
        goal_pose = msg
        if simulator == "gazebo":
            model_state = ModelState()
            model_state.model_name = namespace.strip("/")
            model_state.pose = goal_pose
            rospy.loginfo("Model state pose msg type: {}".format(type(model_state.pose)))
        rospy.loginfo("Goal pose received: %s", goal_pose)

        # Calculate the distance to the goal
        distance = sqrt(((goal_pose.position.x - ground_truth_pose.position.x)**2) +
                        ((goal_pose.position.y - ground_truth_pose.position.y)**2))
        time_to_goal = distance / avg_speed
        rospy.loginfo("Distance to goal: %s", distance)
        rospy.loginfo("Robot will reach the goal in %s seconds", time_to_goal)
        time_taken_to_goal = 0.0
        time_remaining_to_goal = time_to_goal

        start_pose = copy.deepcopy(ground_truth_pose)

        interpolated_x = np.linspace(start_pose.position.x, goal_pose.position.x, 100)
        interpolated_y = np.linspace(start_pose.position.y, goal_pose.position.y, 100)

        # Publish the goal pose, and cancel if preempted during travel to goal
        while time_remaining_to_goal > 0.0:
            rospy.loginfo(self.robot_name+": Time remaining to goal: %s", time_remaining_to_goal)
            if time_remaining_to_goal < 0.5:
                if self._as.is_preempt_requested():
                    self._as.set_preempted()
                    rospy.loginfo("Goal cancelled")
                    return
                rospy.sleep(time_remaining_to_goal)
                time_remaining_to_goal = 0.0
            else:
                if self._as.is_preempt_requested():
                    self._as.set_preempted()
                    rospy.loginfo("Goal cancelled")
                    return
                rospy.sleep(0.5)
                time_taken_to_goal += 0.5
                time_remaining_to_goal = time_to_goal - time_taken_to_goal

            # Update the robot's position in the simulator using linear interpolation (np.linspace)
            goal_completion_percentage = (time_taken_to_goal / time_to_goal) * 100
            
            robot_pose_update = Pose()
            robot_pose_update.position.x = interpolated_x[int(goal_completion_percentage)]
            robot_pose_update.position.y = interpolated_y[int(goal_completion_percentage)]
            robot_pose_update.orientation.w = 1.0

            # Publish the robot's position update in the simulator
            if simulator == "gazebo":
                model_state.pose = robot_pose_update
                pose_pub.publish(model_state)
                rospy.loginfo("Robot pose updated in Gazebo")
            elif simulator == "stage_ros":
                offset_pose = copy.deepcopy(robot_pose_update)
                offset_pose.position.x = offset_pose.position.x - 162.0
                offset_pose.position.y = offset_pose.position.y - 110.0

                goal_pose = Pose()
                goal_pose.position.x = offset_pose.position.x
                goal_pose.position.y = offset_pose.position.y
                goal_pose.orientation.w = 1.0

                pose_pub.publish(goal_pose)
                rospy.loginfo("Robot pose updated in Stage")


        if simulator == "gazebo":
            pose_pub.publish(model_state)

        elif simulator == "stage_ros":
            offset_goal = copy.deepcopy(msg)
            offset_goal.position.x = offset_goal.position.x - 162.0
            offset_goal.position.y = offset_goal.position.y - 110.0

            goal_pose = Pose()
            goal_pose.position.x = offset_goal.position.x
            goal_pose.position.y = offset_goal.position.y
            goal_pose.orientation.w = 1.0

            pose_pub.publish(goal_pose)

        rospy.loginfo("Goal pose published to " + simulator)


    def move_base_goal_cb(self, msg):
        goal_pose = msg.goal.target_pose.pose
        self.goal_pose_cb(goal_pose)


def move_base_simple_goal_cb(msg):
    goal_pose = msg.pose
    server.goal_pose_cb(goal_pose)


if __name__ == '__main__':
    # rospy.Subscriber(namespace+'move_base/goal', MoveBaseActionGoal, move_base_goal_cb)
    rospy.Subscriber(namespace+'move_base_simple/goal', PoseStamped, move_base_simple_goal_cb)
    if simulator == "virtual_robots":
        rospy.Subscriber(namespace+'robot_pose', Pose, ground_truth_pose_cb)
    else:
        rospy.Subscriber(namespace+'amcl_pose', PoseWithCovarianceStamped, ground_truth_pose_cb)
    rospy.init_node('move_base_abstract_actionserver')
    server = MoveBaseAbstractActionServer()
    
    rospy.loginfo("Started move_base_abstract_actionserver node with args:\n"\
                  "Robot name: {}\n" \
                  "Simulator: {}\n" \
                  "Average speed: {}\n" \
                  "Robot start position x: {}\n" \
                  "Robot start position y: {}\n".format(server.robot_name, server.simulator, server.avg_speed, server.robot_start_pos_x, server.robot_start_pos_y)
    )
    rospy.spin()
